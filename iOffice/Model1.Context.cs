//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iOffice
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AlexLoginEntities : DbContext
    {
        public AlexLoginEntities()
            : base("name=AlexLoginEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<aABC> aABCs { get; set; }
        public DbSet<Abcon> Abcons { get; set; }
        public DbSet<AbDepartmentType> AbDepartmentTypes { get; set; }
        public DbSet<abill> abills { get; set; }
        public DbSet<AbillCuser> AbillCusers { get; set; }
        public DbSet<abill1> abills1 { get; set; }
        public DbSet<AbNghiPhep> AbNghiPheps { get; set; }
        public DbSet<AbNguoiDich> AbNguoiDiches { get; set; }
        public DbSet<AbScreen> AbScreens { get; set; }
        public DbSet<AbTrangThaiDuyet> AbTrangThaiDuyets { get; set; }
        public DbSet<AbVangMat> AbVangMats { get; set; }
        public DbSet<ABYn> ABYns { get; set; }
        public DbSet<AttactFilePDN> AttactFilePDNs { get; set; }
        public DbSet<BDepartment> BDepartments { get; set; }
        public DbSet<BOfSupply> BOfSupplies { get; set; }
        public DbSet<Buser_Securety> Buser_Securety { get; set; }
        public DbSet<Buser> Busers { get; set; }
        public DbSet<Busers2> Busers2 { get; set; }
        public DbSet<ChiTietBuocKy> ChiTietBuocKies { get; set; }
        public DbSet<ChucVu> ChucVus { get; set; }
        public DbSet<clzl> clzls { get; set; }
        public DbSet<ContentMail> ContentMails { get; set; }
        public DbSet<GUI_Language> GUI_Language { get; set; }
        public DbSet<pdna> pdnas { get; set; }
        public DbSet<pdna1> pdnaS1 { get; set; }
        public DbSet<PDNLink> PDNLinks { get; set; }
        public DbSet<PDNLuser> PDNLusers { get; set; }
        public DbSet<Projectm> Projectms { get; set; }
        public DbSet<Projectn> Projectns { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<Projectu> Projectus { get; set; }
        public DbSet<PSworkm> PSworkms { get; set; }
        public DbSet<PSwork> PSworks { get; set; }
        public DbSet<QuyTrinhXetDuyet> QuyTrinhXetDuyets { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<TheSystem> TheSystems { get; set; }
        public DbSet<TheUser> TheUsers { get; set; }
        public DbSet<Ugroup> Ugroups { get; set; }
        public DbSet<Users_Systems> Users_Systems { get; set; }
        public DbSet<UShare> UShares { get; set; }
        public DbSet<zszl> zszls { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    }
}
